(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/// <reference path="typings.d.ts" />
function main() {
    var params = parse(document.location.search);
    if (params.id == null || params.tip == null) {
        $('#loading').hide();
        creator.show();
        return;
    }
    var cookie = getCookie();
    if (cookie.ip == null || cookie.port == null) {
        $('#loading').hide();
        setting.show(params);
        return;
    }
    var latest = cookie.latest;
    if (latest != null
        && latest.id === params.id
        && latest.tip === params.tip
        && latest.date > Date.now() - 15 * 1000 // 同じチャンネルに再アクセスした時は設定をやり直す
    ) {
        $('#loading').hide();
        setting.show(params);
        return;
    }
    everyTime.show(cookie, params);
}
var creator;
(function (creator) {
    function show() {
        $('#creator').show();
        $('#creator-streamURL').bind('input', function () {
            var a = /http:\/\/([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+):([0-9]+)\/stream\/([0-9abcdef]+)/
                .exec($(this).val());
            if (a == null) {
                return;
            }
            var ip = toInt(a[1].split('.').map(function (x) { return Number.parseInt(x); }));
            if (isGlobalIP(ip)) {
                $('#creator-ip').val(a[1]);
            }
            $('#creator-id').val(a[3]);
            $('#creator-port').val(a[2]);
            updateURL();
        });
        $('#creator-id').bind('input', updateURL);
        $('#creator-ip').bind('input', updateURL);
        $('#creator-port').bind('input', updateURL);
        getIPs(function (ip) {
            if (isIPv4(ip) && isGlobalIP(toInt(ip.split('.').map(function (x) { return Number.parseInt(x); })))) {
                $('#creator-ip').val(ip);
                updateURL();
            }
        });
    }
    creator.show = show;
    function updateURL() {
        var url = location.href.replace(/\?.*/, "");
        var id = $('#creator-id').val() || '{チャンネルID}';
        var ip = $('#creator-ip').val() || '{IP}';
        var port = $('#creator-port').val() || '{ポート番号}';
        // $('#creator-output').val(`${url}?id=${id}&tip=${ip}:${port}`);
        $('#creator-output').val(url + "?");
    }
    function isGlobalIP(ip) {
        return !(toInt([10, 0, 0, 0]) <= ip && ip <= toInt([10, 255, 255, 255])
            || toInt([127, 0, 0, 0]) <= ip && ip <= toInt([127, 255, 255, 255])
            || toInt([169, 254, 0, 0]) <= ip && ip <= toInt([169, 254, 255, 255])
            || toInt([172, 16, 0, 0]) <= ip && ip <= toInt([172, 31, 255, 255])
            || toInt([192, 168, 0, 0]) <= ip && ip <= toInt([192, 168, 255, 255])
            || toInt([224, 0, 0, 0]) <= ip);
    }
    function isIPv4(ip) {
        return ip.match(/[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/);
    }
    function toInt(ipArray) {
        return ipArray[0] * 0x1000000
            + ipArray[1] * 0x10000
            + ipArray[2] * 0x100
            + ipArray[3];
    }
})(creator || (creator = {}));
var setting;
(function (setting) {
    function show(params) {
        $('#setting').show();
        $('#setting-button').click(function () {
            $('#setting-info').show();
            var ip = $('#setting-ip').val();
            var port = Number.parseInt($('#setting-port').val());
            Cookies.set('ip', ip);
            Cookies.set('port', port);
            redirect(ip, port, params.id, params.tip);
        });
    }
    setting.show = show;
})(setting || (setting = {}));
var everyTime;
(function (everyTime) {
    function show(cookie, params) {
        redirect(cookie.ip, cookie.port, params.id, params.tip);
    }
    everyTime.show = show;
})(everyTime || (everyTime = {}));
function redirect(ip, port, id, tip) {
    Cookies.set('latest', JSON.stringify({ id: id, tip: tip, date: Date.now() }));
    var url = "http://" + ip + ":" + port + "/pls/" + id + "?tip=" + tip;
    $('.link').attr('href', url);
    $('#iframe').attr('src', url);
}
function parse(search) {
    var params = {};
    search.slice(1)
        .split('&')
        .map(function (x) { return x.split('='); })
        .forEach(function (x) {
        params[decodeURIComponent(x[0])] = decodeURIComponent(x[1]);
    });
    return params;
}
function getCookie() {
    return {
        ip: Cookies.get('ip'),
        port: Number.parseInt(Cookies.get('port')),
        latest: parseLatest(Cookies.get('latest'))
    };
}
function parseLatest(latest) {
    try {
        return JSON.parse(latest);
    }
    catch (e) {
        return null;
    }
}
var base64;
(function (base64_1) {
    var tableStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var table = tableStr.split("");
    function atob(base64) {
        if (/(=[^=]+|={3,})$/.test(base64))
            throw new Error("String contains an invalid character");
        base64 = base64.replace(/=/g, "");
        var n = base64.length & 3;
        if (n === 1)
            throw new Error("String contains an invalid character");
        for (var i = 0, j = 0, len = base64.length / 4, bin = []; i < len; ++i) {
            var a = tableStr.indexOf(base64[j++] || "A"), b = tableStr.indexOf(base64[j++] || "A");
            var c = tableStr.indexOf(base64[j++] || "A"), d = tableStr.indexOf(base64[j++] || "A");
            if ((a | b | c | d) < 0)
                throw new Error("String contains an invalid character");
            bin[bin.length] = ((a << 2) | (b >> 4)) & 255;
            bin[bin.length] = ((b << 4) | (c >> 2)) & 255;
            bin[bin.length] = ((c << 6) | d) & 255;
        }
        ;
        return String.fromCharCode.apply(null, bin).substr(0, bin.length + n - 4);
    }
    ;
    function btoa(bin) {
        for (var i = 0, j = 0, len = bin.length / 3, base64 = []; i < len; ++i) {
            var a = bin.charCodeAt(j++), b = bin.charCodeAt(j++), c = bin.charCodeAt(j++);
            if ((a | b | c) > 255)
                throw new Error("String contains an invalid character");
            base64[base64.length] = table[a >> 2] + table[((a << 4) & 63) | (b >> 4)] +
                (isNaN(b) ? "=" : table[((b << 2) & 63) | (c >> 6)]) +
                (isNaN(b + c) ? "=" : table[c & 63]);
        }
        return base64.join("");
    }
    ;
    function hexToBase64(str) {
        return btoa(String.fromCharCode.apply(null, str.replace(/\r|\n/g, "").replace(/([\da-fA-F]{2}) ?/g, "0x$1 ").replace(/ +$/, "").split(" ")));
    }
    base64_1.hexToBase64 = hexToBase64;
    function base64ToHex(str) {
        for (var i = 0, bin = atob(str.replace(/[ \r\n]+$/, "")), hex = []; i < bin.length; ++i) {
            var tmp = bin.charCodeAt(i).toString(16);
            if (tmp.length === 1)
                tmp = "0" + tmp;
            hex[hex.length] = tmp;
        }
        return hex.join(" ");
    }
    base64_1.base64ToHex = base64ToHex;
})(base64 || (base64 = {}));
main();
},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
